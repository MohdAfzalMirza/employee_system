import 'dart:async';
import 'dart:developer' as dev;

/// Automatically record stack traces for any message of this level or above.
///
/// Because this is expensive, this is off by default.
Level recordStackTraceAtLevel = Level.off;

/// Use a [Logger] to log debug messages.
///
/// [Logger]s are named using a hierarchical dot-separated name convention.
class Logger {
  static void _log(String tag, Level logLevel, Object? message,
      [Object? error, StackTrace? stackTrace, Zone? zone]) {
    if (message is Function) {
      message = (message as Object? Function())();
    }

    String msg;
    if (message is String) {
      msg = message;
    } else {
      msg = message.toString();
    }

    if (stackTrace == null && logLevel >= recordStackTraceAtLevel) {
      stackTrace = StackTrace.current;
      error ??= 'autogenerated stack trace for $logLevel $msg';
    }
    zone ??= Zone.current;

    dev.log("$tag : $msg",
        level: logLevel.value,
        zone: zone,
        error: error,
        stackTrace: stackTrace);
  }

  static void info(String tag, Object? message,
          [Object? error, StackTrace? stackTrace]) =>
      _log(tag, Level.info, message, error, stackTrace);

  static void warning(String tag, Object? message,
          [Object? error, StackTrace? stackTrace]) =>
      _log(tag, Level.warning, message, error, stackTrace);

  static void shout(String tag, Object? message,
          [Object? error, StackTrace? stackTrace]) =>
      _log(tag, Level.shout, message, error, stackTrace);
}

class Level implements Comparable<Level> {
  final String name;

  final int value;

  const Level(this.name, this.value);

  /// Special key to turn on logging for all levels ([value] = 0).
  static const Level all = Level('ALL', 0);

  /// Special key to turn off all logging ([value] = 2000).
  static const Level off = Level('OFF', 2000);

  /// Key for informational messages ([value] = 800).
  static const Level info = Level('INFO', 800);

  /// Key for potential problems ([value] = 900).
  static const Level warning = Level('WARNING', 900);

  /// Key for extra debugging loudness ([value] = 1200).
  static const Level shout = Level('SHOUT', 1200);

  static const List<Level> levels = [all, info, warning, shout, off];

  @override
  bool operator ==(Object other) => other is Level && value == other.value;

  bool operator <(Level other) => value < other.value;

  bool operator <=(Level other) => value <= other.value;

  bool operator >(Level other) => value > other.value;

  bool operator >=(Level other) => value >= other.value;

  @override
  int compareTo(Level other) => value - other.value;

  @override
  int get hashCode => value;

  @override
  String toString() => name;
}
